// Code generated by go-bindata.
// sources:
// data/cx_to_cyjs_style.csv
// DO NOT EDIT!

package converter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCx_to_cyjs_styleCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xe1\x8e\xa3\x20\x10\xc7\xbf\xef\xb3\xe0\x43\xb0\x4a\x2b\x39\x03\x06\xd9\x6c\xf6\xbe\x18\xb4\x54\xc9\x59\x30\x48\xaf\xe7\x3d\xfd\x35\x60\x53\xb9\xda\x4d\xbf\x34\x93\x99\xdf\x30\xff\xf9\x4f\x25\x34\x43\xf5\x3b\x65\x19\x62\x75\x09\x31\xe1\xa0\x31\xf6\x20\x6d\xd2\x9a\xc1\x58\x30\x39\xab\x74\xf7\xb6\xa6\x38\x83\xa4\x2a\x21\x43\x24\xfd\xba\xc1\x66\x14\xad\x72\x33\x70\x56\xe8\x69\x14\x56\xea\x76\x8e\x9a\x3e\x71\xc6\xf3\x1b\x7d\x51\x07\xd7\x03\x7d\x3e\x35\xd2\x06\x6a\x87\x8b\xa2\x4e\x69\x41\x19\x68\x44\xfb\xab\xb3\xe6\xac\x0f\x1b\x12\xe2\xd9\x77\xf2\xf9\xfc\x02\xbe\xa3\x02\x0c\xa2\x91\x43\xf4\x92\xcf\x2f\x23\x1f\xe7\x84\xea\x8e\x12\x5e\x57\xf8\x27\x02\x47\xa3\x5d\x32\xa9\xbf\x32\x52\xbd\xa2\x76\x30\x5d\xa8\xa3\x38\xa9\x61\xf6\xf1\x9a\x2a\x69\x85\x39\xa6\x04\x38\xf9\xc7\x25\xbf\xc5\xa0\x3a\x0d\x46\x33\x29\xa7\x8c\x5e\x83\xd1\x8a\x1e\x7e\xbe\x5c\x95\xc3\x12\x81\xa9\x17\xa3\x0c\xbf\x21\x9d\x23\xbc\xcf\x39\xe8\xa5\xea\x7a\x17\x29\x0e\x67\x78\xf4\xdf\x2f\x19\xa5\xdf\x50\xb6\xdf\xe4\x7d\x7e\xc3\xd5\x7b\xfe\x3b\xdf\xfe\xa7\xb6\x7d\x5b\x51\x1b\x17\x5a\x55\x5f\x34\x2b\x74\x60\x72\xfd\x03\x7d\x5d\x0d\x1b\x94\x96\xc9\xe4\xe6\x41\xfa\x30\x94\x2b\xce\xe8\x0f\x54\x7f\x90\x0a\x15\x28\xe5\x28\x5b\x3e\x07\x0f\x3f\xce\x7f\x95\x8b\x14\x3e\x17\x57\xd1\x0f\x96\xa2\x1a\x32\x46\x3f\x6f\x67\x35\x67\xdb\xca\x44\x58\x6b\x2e\x49\xb8\xb1\x8f\x97\x77\x21\xdb\x23\x1e\x35\x38\x61\x3b\xe9\x36\x1a\xfe\x05\x00\x00\xff\xff\xac\x0b\x22\xdf\xe4\x03\x00\x00")

func dataCx_to_cyjs_styleCsvBytes() ([]byte, error) {
	return bindataRead(
		_dataCx_to_cyjs_styleCsv,
		"data/cx_to_cyjs_style.csv",
	)
}

func dataCx_to_cyjs_styleCsv() (*asset, error) {
	bytes, err := dataCx_to_cyjs_styleCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cx_to_cyjs_style.csv", size: 996, mode: os.FileMode(420), modTime: time.Unix(1462400101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cx_to_cyjs_style.csv": dataCx_to_cyjs_styleCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cx_to_cyjs_style.csv": &bintree{dataCx_to_cyjs_styleCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

