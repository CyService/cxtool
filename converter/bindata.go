// Code generated by go-bindata.
// sources:
// data/cx_to_cyjs_style.csv
// DO NOT EDIT!

package converter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCx_to_cyjs_styleCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xd1\xae\xa2\x30\x10\x86\xef\x7d\x96\xf2\x10\x15\x46\x21\x4b\xa8\x29\x35\xc6\xbd\x21\x05\x2b\x34\x8b\xd4\x94\x1a\xd7\x7d\xfa\x35\x2d\x46\x7a\x68\x3c\xe7\x86\x4c\x66\xbe\x99\xff\xcf\x4f\x0b\x92\x40\xb5\x26\x34\x01\x5a\xed\x70\x56\x30\x54\xf3\xe6\x4f\xab\xd5\x6d\x38\x45\x8d\xea\x95\x46\xa3\xd1\x72\x68\x57\x73\x92\x51\x5c\x94\x3b\x4c\xa1\x88\x8f\xa8\x56\xfa\x24\x74\xa4\xae\xbc\x91\xe6\x81\x86\xdb\xa5\x16\xda\xc3\x0f\x59\xc2\xd2\x17\x77\x97\x27\xd3\x79\xd4\x26\xcb\xf3\x2a\x26\x39\xa1\x9f\xc5\x7d\xd5\x37\x19\x52\xce\xf1\x1a\x72\xd4\xf3\x5a\xf4\xde\x0d\xdb\x9f\xc4\x96\x0a\x6e\xba\x21\x05\xab\xca\xec\x37\xa0\xb3\x1a\x4c\x34\xca\x7f\x62\x79\xdb\x51\x1b\x1c\x4f\xd4\x99\x5f\x64\xff\xb0\xf5\x9c\xf2\x3c\x1b\xf1\xd7\x04\xdd\x96\x29\xde\x01\x1a\x3b\x7e\x15\xee\xeb\xda\x29\x64\xdb\x94\xa1\x4e\xc8\xb6\x33\xde\x82\x4b\x74\x19\xa5\x75\xed\xb5\x57\x90\x6c\x83\xbc\xed\x07\x62\x7a\xf7\x3f\x05\xf1\x95\x0a\x07\x31\xa3\x02\x91\xcf\xa6\xdf\xc6\xe4\xd8\xac\x78\xbe\x82\xe3\x33\xaa\x5e\x0e\x22\x1a\xcd\xa3\x17\xb6\x74\xe3\x92\x51\xf2\x0b\xaa\x7d\x51\x42\x0e\x31\x83\x64\x7a\xd1\x16\x5e\x2a\xff\x94\xf3\xbc\x85\x6c\x95\x64\x4f\x63\xa8\x30\xa5\xe4\xf0\xfa\x95\xea\xa6\x1b\x11\x71\xad\xd5\x3d\x72\xff\xd5\xd6\xd3\x45\x4c\xb7\xc0\xbc\x05\xc3\x75\x2b\x4c\x60\xe1\x7f\x00\x00\x00\xff\xff\x85\xa7\xe5\xf7\xa1\x03\x00\x00")

func dataCx_to_cyjs_styleCsvBytes() ([]byte, error) {
	return bindataRead(
		_dataCx_to_cyjs_styleCsv,
		"data/cx_to_cyjs_style.csv",
	)
}

func dataCx_to_cyjs_styleCsv() (*asset, error) {
	bytes, err := dataCx_to_cyjs_styleCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cx_to_cyjs_style.csv", size: 929, mode: os.FileMode(420), modTime: time.Unix(1460159890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cx_to_cyjs_style.csv": dataCx_to_cyjs_styleCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cx_to_cyjs_style.csv": &bintree{dataCx_to_cyjs_styleCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

