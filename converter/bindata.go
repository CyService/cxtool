// Code generated by go-bindata.
// sources:
// data/cx_to_cyjs_style.csv
// DO NOT EDIT!

package converter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCx_to_cyjs_styleCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xd1\x8e\xb2\x30\x10\x85\xef\x7d\x96\xf2\x10\x15\x46\x21\x3f\xa1\xa6\xd4\x18\xff\x1b\x52\xb0\x02\x59\x6c\x4d\xa9\x71\xd9\xa7\x5f\xd3\x62\xa4\x2b\x1a\x6f\x9a\xc9\xcc\x37\x3d\x27\xa7\xcd\x48\x04\xc5\x92\xd0\x08\x68\xb1\xc1\x49\xc6\x50\xa9\xf4\x41\xe8\xa0\x52\x9d\xd2\xa8\x37\xba\x95\xf5\x62\x4a\x31\x8a\xb3\x7c\x83\x29\x64\xe1\xfe\x0e\xab\x33\xaf\x5a\x33\x20\xa3\xb9\xec\xcf\x5c\x0b\x59\x0d\xde\xd2\x2e\x89\x58\x7c\xa7\xaf\xed\xc1\x34\x48\x5e\x4e\xa5\xd0\x8e\x5a\x25\x69\x5a\x84\x24\x25\x14\x95\xbc\xfa\xaa\xb5\xba\xc8\xc3\x8c\x05\x5f\xfb\x41\xbe\xd6\x4f\xf1\x12\x52\xd4\xf1\x52\x74\xde\x4d\xb6\x3f\x4a\x3e\xeb\xb8\xe9\x8a\x64\xac\xc8\x93\xff\x80\x8e\x4a\x9a\xa0\x6f\x7f\x84\xe7\x7a\x42\xad\x70\x38\x52\x47\x7e\x6a\xbb\xc1\xd6\x53\xca\x73\x6e\xc4\xb7\x79\xe3\x39\x8f\xf1\x06\x50\xdf\xf0\xb3\x70\xa7\x6b\xc7\x90\xac\x63\x86\x1a\xd1\xd6\x8d\xf1\x8c\xb8\x74\x9f\x63\xb5\xde\xbd\xf6\x02\xa2\xf5\x2c\x6f\xfb\x33\x61\x3d\xfa\xef\xe2\xf8\x4b\xcd\xc7\x31\xa1\x66\x82\x9f\x4c\x3f\x0c\xcb\x6d\x24\xd9\xed\x5f\xec\x6f\x81\x75\xad\x14\x41\x6f\x86\x4e\xd8\xd2\x8d\x73\x46\xc9\x3f\x28\xb6\x59\x0e\x29\x84\x0c\xa2\xf1\x97\x5b\xf8\x59\xff\x53\xce\x73\xf8\xda\x5c\x4e\xb6\x34\x84\x02\x53\x4a\x76\xf7\x67\x55\x17\x5d\x89\x80\x6b\xad\xae\x81\x7b\x63\x5b\x8f\xf7\x62\xba\x06\xe6\x2d\x18\xae\x6b\x61\x66\x16\x7e\x03\x00\x00\xff\xff\x8f\xa0\x07\xe5\xbb\x03\x00\x00")

func dataCx_to_cyjs_styleCsvBytes() ([]byte, error) {
	return bindataRead(
		_dataCx_to_cyjs_styleCsv,
		"data/cx_to_cyjs_style.csv",
	)
}

func dataCx_to_cyjs_styleCsv() (*asset, error) {
	bytes, err := dataCx_to_cyjs_styleCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cx_to_cyjs_style.csv", size: 955, mode: os.FileMode(420), modTime: time.Unix(1462319249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cx_to_cyjs_style.csv": dataCx_to_cyjs_styleCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cx_to_cyjs_style.csv": &bintree{dataCx_to_cyjs_styleCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

