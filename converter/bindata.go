// Code generated by go-bindata.
// sources:
// data/cx_to_cyjs_style.csv
// DO NOT EDIT!

package converter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCx_to_cyjs_styleCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xd1\xce\xa2\x30\x10\x85\xef\x7d\x96\xf2\x10\x15\x46\x21\x4b\x5a\x53\x6a\x8c\x7b\x43\x0a\x56\x68\x16\xa9\x29\x35\xae\xfb\xf4\x6b\xa8\x46\x2a\xfd\xf5\xa6\x99\xcc\x7c\x33\x67\x72\xa6\x84\x26\x50\x2e\x29\x4b\x80\x95\x1b\x9c\x11\x8e\x2a\x51\xff\x69\x8c\xbe\xf4\x87\xa8\xd6\x9d\x36\x68\xb0\x46\xf5\xcd\x62\x4a\x72\x86\x49\xb1\xc1\x0c\x48\xbc\x47\x95\x36\x07\x69\x22\x7d\x16\xb5\xb2\x37\xd4\x5f\x4e\x95\x34\x1e\xbe\xcb\x12\x9e\x3e\xb9\xab\x3a\xd8\xd6\xa3\x56\x59\x9e\x97\x31\xcd\x29\xfb\x2c\xee\xab\xbe\xc8\x90\x72\x8e\x97\x90\xa3\x4e\x54\xb2\xf3\x66\x8c\xf9\x87\xd8\x5c\xc1\x55\x57\x94\xf0\xb2\xc8\x7e\x03\x3a\xea\xde\x46\x83\xfa\x27\xe7\xb3\x1d\xb5\xc2\xf1\x83\x3a\x8a\x93\xea\x6e\x63\x3c\xa5\xbc\x9d\xad\xfc\x6b\x83\xdb\x16\x29\xde\x00\x1a\x5a\x71\x96\xee\x75\xe9\x14\xb2\x75\xca\x51\x2b\x55\xd3\x5a\xaf\xc1\x39\x3a\xb7\xb2\x80\x1c\x62\x0e\xc9\x97\x5b\x2e\x20\x59\x07\x87\x8c\xf9\x80\x77\xaf\xfc\x27\x77\xde\xa9\xb0\x3b\x13\x2a\x70\x87\x49\xf5\xab\x77\x8e\xcd\xc8\xfd\x6b\xec\xef\xfe\x75\xaa\x97\xd1\x60\x6f\x9d\x1c\x43\x57\x2e\x38\xa3\xbf\xa0\xdc\x92\x37\x6b\x46\x78\xae\xec\x69\x86\xe4\x0a\xba\x65\x31\x94\x98\x31\xba\x7b\xde\x4d\x5f\x4c\x2d\x23\x61\x8c\xbe\x46\xee\x88\x63\xfc\x98\x88\xd9\x1a\xb8\xd7\x60\x85\x69\xa4\xfd\xa9\xe1\xdb\xa2\xff\x03\x00\x00\xff\xff\xa1\xd4\x7e\x4f\xb3\x03\x00\x00")

func dataCx_to_cyjs_styleCsvBytes() ([]byte, error) {
	return bindataRead(
		_dataCx_to_cyjs_styleCsv,
		"data/cx_to_cyjs_style.csv",
	)
}

func dataCx_to_cyjs_styleCsv() (*asset, error) {
	bytes, err := dataCx_to_cyjs_styleCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cx_to_cyjs_style.csv", size: 947, mode: os.FileMode(420), modTime: time.Unix(1455152811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cx_to_cyjs_style.csv": dataCx_to_cyjs_styleCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cx_to_cyjs_style.csv": &bintree{dataCx_to_cyjs_styleCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

