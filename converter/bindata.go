// Code generated by go-bindata.
// sources:
// data/cx_to_cyjs_style.csv
// DO NOT EDIT!

package converter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCx_to_cyjs_styleCsv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xd1\x8e\xb2\x30\x10\x85\xef\x7d\x96\xf2\x10\x15\x46\x21\x3f\x69\x4d\xa9\x31\xfe\x37\x04\xb1\x42\xb3\x48\x4d\xa9\x71\xdd\xa7\x5f\xd3\x6a\xa4\xd2\xd5\x1b\x32\xe9\x7c\x73\xce\xe4\x0c\x84\x26\x50\xce\x29\x4b\x80\x95\x2b\x9c\x11\x8e\x76\x55\xfd\xd5\x68\x75\xee\xf7\x51\xad\x3a\xa5\xd1\x60\xb4\xec\x9b\xd9\x98\xe4\x0c\x93\x62\x85\x19\x90\x78\x8b\x76\x4a\xef\x85\x8e\xd4\xa9\xaa\xa5\xb9\xa2\xfe\x7c\xdc\x09\xed\xe1\x9b\x2c\xe1\xe9\x83\xbb\xc8\xbd\x69\x3d\x6a\x91\xe5\x79\x19\xd3\x9c\xb2\xf7\xe6\xbe\xeb\x93\x0c\x39\xe7\x78\x0e\x39\xaa\x55\x6f\x44\x6f\x3c\x15\xdb\xb9\xdb\x4d\x3d\x5c\x77\x41\x09\x2f\x8b\xec\x3f\xa0\xc3\x4d\x21\x1a\xe4\x8f\x98\xaa\x3b\x6a\x81\xe3\x3b\x75\xa8\x8e\xb2\xbb\xda\x7a\x4c\x79\x5b\x1b\xf1\x6d\x82\xfb\x16\x29\x5e\x01\x1a\xda\xea\x24\xdc\xd7\x3d\xa7\x90\x2d\x53\x8e\x5a\x21\x9b\xd6\x78\x03\x2e\xd3\x69\x98\x05\xe4\x10\x73\x48\x3e\x5c\x73\x06\xc9\x32\x28\x62\xdf\x83\xe9\x3d\x3b\xef\xf2\x79\xa5\xc2\xf9\x8c\xa8\xc0\x25\x46\xdd\x8f\xe9\x39\x36\x23\xb7\xdf\x63\x7b\x4b\xb0\x93\xbd\x88\x06\x73\xed\x84\x2d\x5d\xbb\xe0\x8c\xfe\x83\x72\x4d\x5e\xc2\xb1\xf0\xd4\xd9\xf3\x0c\xd9\x15\x74\xcd\x62\x28\x31\x63\x74\xf3\xb8\x9c\x3a\xeb\x5a\x44\x95\xd6\xea\x12\xb9\x33\xda\xfa\xae\x88\xd9\x12\xb8\x37\x60\x2a\xdd\x08\xf3\xd7\xc0\xa7\x45\x7f\x03\x00\x00\xff\xff\xed\xdd\xdf\xb9\xb7\x03\x00\x00")

func dataCx_to_cyjs_styleCsvBytes() ([]byte, error) {
	return bindataRead(
		_dataCx_to_cyjs_styleCsv,
		"data/cx_to_cyjs_style.csv",
	)
}

func dataCx_to_cyjs_styleCsv() (*asset, error) {
	bytes, err := dataCx_to_cyjs_styleCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cx_to_cyjs_style.csv", size: 951, mode: os.FileMode(420), modTime: time.Unix(1448500131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cx_to_cyjs_style.csv": dataCx_to_cyjs_styleCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cx_to_cyjs_style.csv": &bintree{dataCx_to_cyjs_styleCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

